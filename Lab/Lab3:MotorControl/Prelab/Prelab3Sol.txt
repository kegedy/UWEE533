//#############################################################################
//
// FILE:   adc_ex1_soc_epwm.c
//
// TITLE:  ADC ePWM Triggering
//
//! \addtogroup bitfield_example_list
//! <h1>ADC ePWM Triggering</h1>
//!
//! This example sets up ePWM1 to periodically trigger a conversion on ADCA.
//!
//! \b External \b Connections \n
//!  - A1 should be connected to a signal to convert
//!
//! \b Watch \b Variables \n
//! - \b adcAResults - A sequence of analog-to-digital conversion samples from
//!   pin A1. The time between samples is determined based on the period
//!   of the ePWM timer.
//!
//
//#############################################################################
// $TI Release: F28004x Support Library v1.08.00.00 $
// $Release Date: Mon Dec 23 17:24:05 IST 2019 $
// $Copyright:
// Copyright (C) 2019 Texas Instruments Incorporated - http://www.ti.com/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//   Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
//
//   Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the
//   distribution.
//
//   Neither the name of Texas Instruments Incorporated nor the names of
//   its contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// $
//#############################################################################

//
// Included Files
//
#include "F28x_Project.h"
#include "math.h"
//
// Defines
//
//#define RESULTS_BUFFER_SIZE     256

#define pi 3.141592653589f
#define al (pi)*(2.0/3.0)
#define N 5000
#define fsw 10000.0
//
// Globals
//

float fsamp = 2*fsw;
float duty = 0.5;// duty ratio                                   //Set stator voltage waveform of 5Hz frequency
float mod_index = 0.5;                          //Modulation index in open loop is our control parameter.Tune this to vary stator voltage magnitude
float w_s = 2*pi*1;
float wt = 0;
//
// Function Prototypes
//
void initADC(void);
void initEPWM(void);
void initADCSOC(void);
void setup1GPIO(void);
__interrupt void adcA1ISR(void);
//float PIController(float Kp,float Ki, float ref,float val);
//
// Main
//
void main(void)
{
    //
    // Initialize device clock and peripherals
    //
    InitSysCtrl();

    //
    // Initialize GPIO
    //
    InitGpio();

    //
    // Disable CPU interrupts
    //
    DINT;

    //
    // Initialize the PIE control registers to their default state.
    // The default state is all PIE interrupts disabled and flags
    // are cleared.
    //
    InitPieCtrl();

    //
    // Disable CPU interrupts and clear all CPU interrupt flags:
    //
    IER = 0x0000;
    IFR = 0x0000;

    //
    // Initialize the PIE vector table with pointers to the shell Interrupt
    // Service Routines (ISR).
    //
    InitPieVectTable();

    //
    // Map ISR functions
    //
    EALLOW;
    PieVectTable.ADCA1_INT = &adcA1ISR;     // Function for ADCA interrupt 1
    EDIS;

    //
    // Configure the ADC and power it up
    //
    initADC();

    //
    // Configure the ePWM
    //
    initEPWM();

    //
    // Setup the ADC for ePWM triggered conversions on channel 1
    //
    initADCSOC();

    //
    // Enable global Interrupts and higher priority real-time debug events:
    //
    IER |= M_INT1;  // Enable group 1 interrupts

    EINT;           // Enable Global interrupt INTM
    ERTM;           // Enable Global realtime interrupt DBGM

    //
    // Initialize results buffer
    //


 //   index = 0;
 //   bufferFull = 0;

    //
    // Enable PIE interrupt
    //
    PieCtrlRegs.PIEIER1.bit.INTx1 = 1;

    //
    // Sync ePWM
    //
    EALLOW;
    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 1;
    EALLOW;
        DacaRegs.DACCTL.bit.DACREFSEL = 1;
        DacaRegs.DACCTL.bit.MODE = 1;
        DacaRegs.DACCTL.bit.LOADMODE = 0;
        DacaRegs.DACOUTEN.bit.DACOUTEN = 1;
        DacaRegs.DACVALS.all = 0;
        DELAY_US(10);
    EDIS;
    //
    // Take conversions indefinitely in loop
    //
   setup1GPIO();

    while(1)
    {
        //
        // Start ePWM
        //
//        EPwm1Regs.ETSEL.bit.SOCAEN = 1;    // Enable SOCA

    }
}

//
// initADC - Function to configure and power up ADCA.
//
void initADC(void)
{
    //
    // Setup VREF as internal
    //
    SetVREF(ADC_ADCA, ADC_INTERNAL, ADC_VREF3P3);
    SetVREF(ADC_ADCC, ADC_INTERNAL, ADC_VREF3P3);

    EALLOW;
    // Set ADCCLK divider to /4
    //
    AdcaRegs.ADCCTL2.bit.PRESCALE = 6;
    AdccRegs.ADCCTL2.bit.PRESCALE = 6;
    //
    // Set pulse positions to late
    //
    AdcaRegs.ADCCTL1.bit.INTPULSEPOS = 1;

    //
    // Power up the ADC and then delay for 1 ms
    //
    AdcaRegs.ADCCTL1.bit.ADCPWDNZ = 1;
    AdccRegs.ADCCTL1.bit.ADCPWDNZ = 1;   // Powers up all the analog circuits inside the ADC
    EDIS;

    DELAY_US(1000);
}

//
// initEPWM - Function to configure ePWM1 to generate the SOC.
//
void initEPWM(void)
{
    EALLOW;

    EPwm1Regs.ETSEL.bit.SOCAEN = 1;     // Enable SOC on A group
    EPwm1Regs.ETSEL.bit.SOCASEL = 1;    // Select SOC when TBCTR = PRD or ZERO
    EPwm1Regs.ETPS.bit.SOCAPRD = 1;     // Generate pulse on 1st event
    EPwm1Regs.ETPS.bit.INTPRD = ET_1ST;              // generate interrupt once for each PWM cycle


    EPwm1Regs.TBPRD = N; //period-1;             // PWM frequency = 1 / period
    EPwm1Regs.CMPA.bit.CMPA = duty*N;   // set duty 50% initially

    EPwm1Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;

    EPwm1Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;
    EPwm1Regs.TBCTL.bit.CLKDIV = TB_DIV1;

    EPwm1Regs.AQCTLA.bit.CAU = AQ_CLEAR;        //EPWM1A goes low when CTR=CMPA register when CTR decrementing
    EPwm1Regs.AQCTLA.bit.CAD = AQ_SET;          //EPWM1A goes hi when CTR=CMPA register when CTR incrementing

    //Deadband settings
    EPwm1Regs.DBCTL.bit.IN_MODE =0x0; // ePWM-A for both RED and FED
    EPwm1Regs.DBCTL.bit.OUT_MODE = DB_FULL_ENABLE; // enable Dead-band module
    EPwm1Regs.DBCTL.bit.POLSEL = DB_ACTV_HIC; // active Hi complementary
    EPwm1Regs.DBFED.all = 10; //Falling edge delay - based on sysclk (ePWM table 2-14)
    EPwm1Regs.DBRED.all = 10; //Rising edge delay - based on sysclk (ePWM table

    // Motor PWM

    EPwm2Regs.TBPRD = N; //period-1;             // PWM frequency = 1 / period
    EPwm2Regs.CMPA.bit.CMPA = duty*N;   // set duty 50% initially

    EPwm2Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;

    EPwm2Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;
    EPwm2Regs.TBCTL.bit.CLKDIV = TB_DIV1;

    EPwm2Regs.AQCTLA.bit.CAU = AQ_CLEAR;        //EPWM1A goes low when CTR=CMPA register when CTR decrementing
    EPwm2Regs.AQCTLA.bit.CAD = AQ_SET;          //EPWM1A goes hi when CTR=CMPA register when CTR incrementing
    EPwm2Regs.AQCTLA.bit.ZRO = 0;
    EPwm2Regs.AQCTLA.bit.PRD = 0;
    //Deadband settings
    EPwm2Regs.DBCTL.bit.IN_MODE =0x0; // ePWM-A for both RED and FED
    EPwm2Regs.DBCTL.bit.OUT_MODE = DB_FULL_ENABLE; // enable Dead-band module
    EPwm2Regs.DBCTL.bit.POLSEL = DB_ACTV_HIC; // active Hi complementary
    EPwm2Regs.DBFED.all = 10; //Falling edge delay - based on sysclk (ePWM table 2-14)
    EPwm2Regs.DBRED.all = 10; //Rising edge delay - based on sysclk (ePWM table

    EPwm3Regs.TBPRD = N; //period-1;             // PWM frequency = 1 / period
    EPwm3Regs.CMPA.bit.CMPA = duty*N;   // set duty 50% initially

    EPwm3Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;

    EPwm3Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;
    EPwm3Regs.TBCTL.bit.CLKDIV = TB_DIV1;

    EPwm3Regs.AQCTLA.bit.CAU = AQ_CLEAR;        //EPWM1A goes low when CTR=CMPA register when CTR decrementing
    EPwm3Regs.AQCTLA.bit.CAD = AQ_SET;          //EPWM1A goes hi when CTR=CMPA register when CTR incrementing

    //Deadband settings
    EPwm3Regs.DBCTL.bit.IN_MODE =0x0; // ePWM-A for both RED and FED
    EPwm3Regs.DBCTL.bit.OUT_MODE = DB_FULL_ENABLE; // enable Dead-band module
    EPwm3Regs.DBCTL.bit.POLSEL = DB_ACTV_HIC; // active Hi complementary
    EPwm3Regs.DBFED.all = 10; //Falling edge delay - based on sysclk (ePWM table 2-14)
    EPwm3Regs.DBRED.all = 10; //Rising edge delay - based on sysclk (ePWM table

    EPwm4Regs.TBPRD = N; //period-1;             // PWM frequency = 1 / period
    EPwm4Regs.CMPA.bit.CMPA = duty*N;   // set duty 50% initially

    EPwm4Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;

    EPwm4Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;
    EPwm4Regs.TBCTL.bit.CLKDIV = TB_DIV1;

    EPwm4Regs.AQCTLA.bit.CAU = AQ_CLEAR;        //EPWM1A goes low when CTR=CMPA register when CTR decrementing
    EPwm4Regs.AQCTLA.bit.CAD = AQ_SET;          //EPWM1A goes hi when CTR=CMPA register when CTR incrementing

    //Deadband settings
    EPwm4Regs.DBCTL.bit.IN_MODE =0x0; // ePWM-A for both RED and FED
    EPwm4Regs.DBCTL.bit.OUT_MODE = DB_FULL_ENABLE; // enable Dead-band module
    EPwm4Regs.DBCTL.bit.POLSEL = DB_ACTV_HIC; // active Hi complementary
    EPwm4Regs.DBFED.all = 10; //Falling edge delay - based on sysclk (ePWM table 2-14)
    EPwm4Regs.DBRED.all = 10; //Rising edge delay - based on sysclk (ePWM table
    EDIS;

}


//
// initADCSOC - Function to configure ADCA's SOC0 to be triggered by ePWM1.
//
void initADCSOC(void)
{
    //
    // Select the channels to convert and the end of conversion flag
    //
    EALLOW;

    AdcaRegs.ADCSOC0CTL.bit.CHSEL = 3;
    AdcaRegs.ADCSOC1CTL.bit.CHSEL = 5;
    AdcaRegs.ADCSOC2CTL.bit.CHSEL = 6;
    AdcaRegs.ADCSOC3CTL.bit.CHSEL = 9;// SOC0 will convert pin A1
                                           // 0:A0  1:A1  2:A2  3:A3
                                           // 4:A4   5:A5   6:A6   7:A7
                                           // 8:A8   9:A9   A:A10  B:A11
                                           // C:A12  D:A13  E:A14  F:A15

    AdcaRegs.ADCSOC0CTL.bit.ACQPS = 9;     // Sample window is 10 SYSCLK cycles
    AdcaRegs.ADCSOC0CTL.bit.TRIGSEL = 5;   // Trigger on ePWM1 SOCA
    AdcaRegs.ADCSOC1CTL.bit.ACQPS = 9;     // Sample window is 10 SYSCLK cycles
    AdcaRegs.ADCSOC1CTL.bit.TRIGSEL = 5;
    AdcaRegs.ADCSOC2CTL.bit.ACQPS = 9;     // Sample window is 10 SYSCLK cycles
    AdcaRegs.ADCSOC2CTL.bit.TRIGSEL = 5;
    AdcaRegs.ADCSOC3CTL.bit.ACQPS = 9;     // Sample window is 10 SYSCLK cycles
    AdcaRegs.ADCSOC3CTL.bit.TRIGSEL = 5;

    AdcaRegs.ADCINTSEL1N2.bit.INT1SEL = 0; // End of SOC0 will set INT1 flag
    AdcaRegs.ADCINTSEL1N2.bit.INT1E = 1;   // Enable INT1 flag
    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1; // Make sure INT1 flag is cleared

    EDIS;
}

//
// adcA1ISR - ADC A Interrupt 1 ISR
//
interrupt void adcA1ISR(void)
{

    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;
    float f_div = 2*pi*fsamp/w_s; // fdiv = fsamp/10
    if (wt > 2*pi) {
        wt = 0;
    }
    wt = wt + (2*pi/f_div);

    //EPwm1Regs.CMPA.bit.CMPA = duty*N;
    EPwm2Regs.CMPA.bit.CMPA = (0.5+ 0.5*mod_index*sin(wt))*N;
    EPwm3Regs.CMPA.bit.CMPA = (0.5+ 0.5*mod_index*sin(wt-al))*N;
    EPwm4Regs.CMPA.bit.CMPA = (0.5+ 0.5*mod_index*sin(wt+al))*N;


    if(1 == AdcaRegs.ADCINTOVF.bit.ADCINT1)
    {
        AdcaRegs.ADCINTOVFCLR.bit.ADCINT1 = 1; //clear INT1 overflow flag
        AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1; //clear INT1 flag
    }

    //
    // Acknowledge the interrupt
    //
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

void setup1GPIO(void)
{
    //
    // Example 1: Basic Pinout.
    // This basic pinout includes:
    // PWM1-3, ECAP1, ECAP2, TZ1-TZ4, SPI-A, EQEP1, SCI-A, CAN-A, I2C
    // and a number of I/O pins
    // These can be combined into single statements for improved
    // code efficiency.
    //

    //
    // Enable PWM1-3 on GPIO0-GPIO5
    //
    EALLOW;
       GpioCtrlRegs.GPAPUD.bit.GPIO0 = 1;    // Disable pull-up on GPIO0 (EPWM1A)
       GpioCtrlRegs.GPAPUD.bit.GPIO1 = 1;    // Disable pull-up on GPIO1 (EPWM1B)


       GpioCtrlRegs.GPAMUX1.bit.GPIO0 = 1;   // Configure GPIO0 as EPWM1A
       GpioCtrlRegs.GPAMUX1.bit.GPIO1 = 1;   // Configure GPIO1 as EPWM1B

       GpioCtrlRegs.GPAPUD.bit.GPIO2 = 1;    // Disable pull-up on GPIO0 (EPWM2A)
       GpioCtrlRegs.GPAMUX1.bit.GPIO2 = 1;   // Configure GPIO0 as EPWM2A

       GpioCtrlRegs.GPAPUD.bit.GPIO3 = 1;    // Disable pull-up on GPIO0 (EPWM2B)
       GpioCtrlRegs.GPAMUX1.bit.GPIO3 = 1;   // Configure GPIO0 as EPWM2A

       GpioCtrlRegs.GPAPUD.bit.GPIO4 = 1;    // Disable pull-up on GPIO0 (EPWM3A)
       GpioCtrlRegs.GPAMUX1.bit.GPIO4 = 1;   // Configure GPIO0 as EPWM3A

       GpioCtrlRegs.GPAPUD.bit.GPIO5 = 1;    // Disable pull-up on GPIO0 (EPWM3B)
       GpioCtrlRegs.GPAMUX1.bit.GPIO5 = 1;   // Configure GPIO0 as EPWM3A

       GpioCtrlRegs.GPAPUD.bit.GPIO6 = 1;    // Disable pull-up on GPIO0 (EPWM4A)
       GpioCtrlRegs.GPAMUX1.bit.GPIO6 = 1;   // Configure GPIO0 as EPWM4A

       GpioCtrlRegs.GPAPUD.bit.GPIO7 = 1;    // Disable pull-up on GPIO0 (EPWM4B)
       GpioCtrlRegs.GPAMUX1.bit.GPIO7 = 1;   // Configure GPIO0 as EPWM4B

    EDIS;
}

//
// End of File
//
